//
//  GGNTManager.m
//  GGNetwoking
//
//  Created by __无邪_ on 15/8/28.
//  Copyright (c) 2015年 __无邪_. All rights reserved.
//

#import "GGNTManager.h"

////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////
/**
 * API URL 调用参数
 */

#define BASE_URL_Recruit @"recruit"
#define BASE_URL_Photo   @"photo"


NSString *const kAPITopTypee = HOTYQ_JAVA_API BASE_URL_Recruit @"/getTypes.do?";
NSString *const kAPIDynamic  = HOTYQ_JAVA_API BASE_URL_Photo @"/getPhotos.do";
////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////

@implementation GGNTManager


#pragma mark - public interface

///1.
- (void)getTopTypesWithParameters:(NSDictionary *)parameters completedHandler:(GGRequestCallbackBlock)completed timeout:(GGRequestTimeoutBlock)timeoutBlock{
    [self POST:kAPITopTypee params:parameters cache:NO completed:completed timeout:timeoutBlock];
}


///2.
- (void)getDynamicListWithParameters:(NSDictionary *)parameters completedHandler:(GGRequestCallbackBlock)completed timeout:(GGRequestTimeoutBlock)timeoutBlock{
    [self POST:kAPIDynamic params:parameters cache:YES completed:completed timeout:timeoutBlock];
}




////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////


#pragma mark - life
+ (instancetype)sharedManager{
    static dispatch_once_t onceToken;
    static GGNTManager *manager;
    dispatch_once(&onceToken, ^{
        manager = [[GGNTManager alloc] init];
    });
    return manager;
}



////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////




@end
